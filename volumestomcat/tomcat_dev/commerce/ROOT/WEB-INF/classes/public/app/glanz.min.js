"use strict";
angular
        .module('productModule', [

        ]);
"use strict";

angular
    .module('productModule')
    .factory('productService', productService);

productService.$inject = ['$q', '$window', '$http', 'urlService'];

function productService($q, $window, $http, urlService) {

    var vm = this;

    vm.PostAddProduct = function (data) {
        var deferred = $q.defer();
        var req = {
            method: 'POST',
            url: urlService.postAddProduct(),
            data: data,
            headers: {
                    'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
            }
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    };

    vm.DeleteProduct = function (id) {
        var deferred = $q.defer();
        var req = {
            method: 'DELETE',
            url: urlService.deleteProduct() + id,
            headers: {
                    'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
            }
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    };

     vm.UpdateProduct = function (data) {
        var deferred = $q.defer();
        var req = {
            method: 'PUT',
            url: urlService.putUpdatePrduct(),
            data: data,
            headers: {
                    'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
            }
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    };

    return {
        getProduct: vm.getProduct,
        PostAddProduct: vm.PostAddProduct,
        DeleteProduct: vm.DeleteProduct,
        UpdateProduct: vm.UpdateProduct
    }
}
'use strict';

angular
    .module('productModule')
    .controller('productController', productController);

//Inject dependencies
productController.$inject = ['$state', 'productService', '$window', '$scope', 'NgTableParams', '$mdDialog', 'productData', '$rootScope', '$timeout'];

function productController($state, productService, $window, $scope, NgTableParams, $mdDialog, productData, $rootScope, $timeout) {

    $window.scrollTo(0, 0);
    var vm = this;
    $timeout(function(){
        $rootScope.hideSpiner();
    }, 0);
    vm.products = productData.productlist;
    $scope.isOpen = false;

    function showSpiner(){
        $mdDialog.show({
            templateUrl: 'app/features/button/button.modal.html'
        });
    };

     function openModal(data, action) {
        $mdDialog.show({
            locals:{
                        dataToPass: data,
                        action: action
                    },
            templateUrl: 'app/features/product/product.modal.html',
            controller: mdDialogCtrlProduct,
            controllerAs: 'vmP'
        })
    };

    vm.deleteProduct = function(id){
        showSpiner();
        productService.DeleteProduct(id).then(function(data){
            $state.reload();
            $mdDialog.hide();
        }, function(error){
            console.log(error);
        });
    };

    vm.updateProduct = function(data){
        openModal(data, 'update');
    };

    var mdDialogCtrlProduct = function($scope, dataToPass, action){

        var vm = this;

        vm.integerval = /^\d*$/;
        
        if(dataToPass == null || dataToPass == undefined){
            vm.product = {};
            vm.imagen = null;
            vm.Img = "img/gris.png"; 
            vm.validImagen = false;
        }else{
            vm.product = dataToPass;
            vm.imagen = null;
            vm.Img = dataToPass.product_image; 
            vm.validImagen = true;
        }

        if(action == 'addcallback'){
            vm.product.category = 'callback';
            $scope.disable = true;
        }else if(vm.product.category == 'callback'){
            $scope.disable = true;
        }else{
            $scope.disable = false;
        }

        $scope.showSpiner = false;

        vm.change = function(){
            if(vm.imagen == undefined){
                swal("La imagen excede el tamaño")
            }else {
                vm.validImagen = true;
                vm.Img = "data:" + vm.imagen.filetype + ";base64," + vm.imagen.base64;
            }
        };

        vm.onLoad = function(){
        };

        vm.addProduct = function(){
            $scope.showSpiner = true;
            //vm.product.product_image = "data:" + vm.imagen.filetype + ";base64," + vm.imagen.base64;
            //vm.product.id = '2fd75ff0-293c-11e7-b7bc-3f30990d70c6';
                        
            if(action == 'addproduct'){
                vm.product.product_image = "data:" + vm.imagen.filetype + ";base64," + vm.imagen.base64;
                vm.product.client_id = localStorage.getItem("tokenJWT").replace(/"/g,'');
                productService.PostAddProduct(vm.product).then(function(data){
                    $state.reload();
                    $mdDialog.hide();
                }, function(error){
                    console.log(error);
                });
            }else if(action == 'update'){
                vm.product.product_image = vm.Img;
                productService.UpdateProduct(vm.product).then(function(){
                    $state.reload();
                    $mdDialog.hide();
                }, function(){
                    console.log(error);
                });
            }else if(action == 'addcallback'){
                vm.product.product_image = "data:" + vm.imagen.filetype + ";base64," + vm.imagen.base64;
                vm.product.client_id = localStorage.getItem("tokenJWT").replace(/"/g,'');
                productService.PostAddProduct(vm.product).then(function(data){
                    $state.reload();
                    $mdDialog.hide();
                }, function(error){
                    console.log(error);
                });
            }
        };

        vm.cancelBtn = function(){
            $mdDialog.hide();
        };

    };

    vm.addCallback = function(){
        if(productData.errorCode == 0){
            swal("Ya hay un registro de callback");
        }else{
            openModal(null, 'addcallback');
        }
    };

    vm.addProduct = function(){
        if(!(productData.errorCode == 0)){
            swal("Agrega primero un callback");
        }else{
            openModal(null, 'addproduct');
        }
    };
}
"use strict";
angular
        .module('passwordModule', [

        ]);
"use strict";

angular
    .module('passwordModule')
    .factory('passwordService', passwordService);

passwordService.$inject = ['$q', '$window', '$http', 'urlService'];

function passwordService($q, $window, $http, urlService) {

    var vm = this;

    vm.getValidRememberPassword = function (token) {
        var deferred = $q.defer();
        var req = {
            headers: {
                    'Authorization': token
            },
            method: 'POST',
            url: urlService.validRememberPassword()
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    }

    vm.getRememberPassword = function (token, password) {
        var deferred = $q.defer();
        var req = {
            headers: {
                    'Authorization': token,
                    'Password': password
            },
            method: 'POST',
            url: urlService.remmemberPassword()
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    }

    return {
        getRememberPassword: vm.getRememberPassword,
        getValidRememberPassword: vm.getValidRememberPassword
    }
}
'use strict';

angular
    .module('passwordModule')
    .controller('passwordController', passwordController);

//Inject dependencies
passwordController.$inject = ['$state', 'passwordService', '$window', '$stateParams', 'sha256', '$rootScope'];

function passwordController($state, passwordService, $window, $stateParams, sha256, $rootScope) {

    //angular.element(document.querySelector('#header')).css('display','none');
    //angular.element(document.querySelector('#footer')).css('display','none');
    //angular.element(document.querySelector('.menu-login')).css('display','none');
    //angular.element(document.querySelector('.div-hamburguesa')).css('display','none');
    var token = $stateParams.token;

    if(!token){
        $state.go('product');
    }
    var vm = this;
    vm.msgValid = false;
    vm.passValid = false;
    vm.show = false;
    vm.divshow = false;

    passwordService.getValidRememberPassword(token).then(function(data){
        if(data.data){
            if(data.data.error){
                    vm.mensaje = "La fecha limite expiró";
                    vm.show = true;
            }else {
                if(data.data.succes == 1){
                    vm.divshow = true;
                }else if(data.data.succes == 0){
                    vm.show = true;
                    vm.mensaje = data.data.msg;
                }
            }
        }else {
            vm.mensaje = "Intentelo mas tarde";
            vm.show = true;
        }
    }, function(error){
        console.log(error);
    })

    vm.passwordRemember = function(){
        vm.divshow = false;
        vm.show = false;
        vm.Form.contrasena = sha256.convertToSHA256(vm.Form.contrasena);
        passwordService.getRememberPassword(token, vm.Form.contrasena).then(function(data){
            if(data.data){
                vm.show = true;
                if(data.data.error){
                    vm.mensaje = "La fecha limite expiró";
                }else {
                    if(data.data.succes == 1){
                        vm.mensaje = data.data.msg;
                    }else if(data.data.succes == 0){
                        vm.mensaje = data.data.msg;
                    }
                }
            }else {
                vm.mensaje = "Intentelo mas tarde";
                vm.show = true;
            }
        }, function(error){
            console.log(error);
        });
    }

    vm.validate = function (valid) {
        if (vm.Form.contrasena != vm.Form.contrasenaveri){
            vm.passValid = true;
        }else {
            vm.passValid = false;
        }
        if (!valid) {
            vm.msgValid = true;
        }
    }

}
"use strict";
angular
        .module('orderModule', [

        ]);
"use strict";

angular
    .module('orderModule')
    .factory('orderService', orderService);

orderService.$inject = ['$q', '$window', '$http', 'urlService', '$state', '$filter'];

function orderService($q, $window, $http, urlService, $state, $filter) {

    var vm = this;

    vm.filterDateTable = function(items, to, from){
        var result = [];
        angular.forEach(items, function (value) {
            if(to != undefined && from != undefined){
                var from1 = from.getTime() - (from.getHours()*3600000 + from.getMinutes()*60000 + from.getSeconds()*1000 + from.getMilliseconds());
                var to1 = to.getTime() - (to.getHours()*3600000 + to.getMinutes()*60000 + to.getSeconds()*1000 + to.getMilliseconds());
                if(from1 == to1){
                    if(new Date(value.order_date).toJSON().slice(0,10).replace(/-/g,'/') == new Date(from.getTime()).toJSON().slice(0,10).replace(/-/g,'/')){
                        result.push(value);
                    }
                }else if((value.order_date >= from1) && (value.order_date <= to1) && (from1 <= to1)){
                    result.push(value);
                }else {
                    result.push(value);
                }
            }else {
                result.push(value);
            }
        });
        return result;
    };

    vm.filterDate = function(arr) {
        var out = [];
        for (var i = 0; i < arr.length; i++) {
            arr[i].order_date = $filter('date')(arr[i].order_date, "dd/MM/yyyy");
            out.push(arr[i]);
        }
        return out;
    };

    vm.exportToCsv = function(filename, csvFile) {
        var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    };

    vm.getListOrder = function () {
        var deferred = $q.defer();
        var req = {
            method: 'GET',
            url: urlService.getOrderList(),
            headers: {
                'Authorization': localStorage.getItem("tokenJWT").replace(/"/g, '')
            }
        };
        $http(req).then(function (data) {
            deferred.resolve(data.data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    };

    return {
        getListOrder: vm.getListOrder,
        filterDateTable: vm.filterDateTable,
        filterDate: vm.filterDate,
        exportToCsv: vm.exportToCsv
    }
}
'use strict';

angular
    .module('orderModule')
    .controller('orderController', orderController);
    
//Inject dependencies
orderController.$inject = ['$state', 'orderService', '$window', '$scope', 'NgTableParams', 'orderData', '$mdDialog', '$filter', '$rootScope', '$timeout'];

function orderController($state, orderService, $window, $scope, NgTableParams, orderData, $mdDialog, $filter, $rootScope, $timeout) {

    $window.scrollTo(0, 0);
    var vm = this;

    $timeout(function(){
        $rootScope.hideSpiner();
    }, 0);

    //vm.displayedCollection = [];
    vm.displayed = [];
    vm.displayed = $filter('orderBy')(orderData.productlist, '-order_date');
    var Backdisplayed = $filter('orderBy')(orderData.productlist, '-order_date');
   
    
    vm.callServer = function callServer() {
        var items = Backdisplayed;
        vm.displayed = [];
        var from = vm.from1;
        var to = vm.to1;
        vm.displayed = orderService.filterDateTable(items, to, from);
    };

    vm.csv = function(){
        orderService.getListOrder().then(function(data){
            var dataCsvfilter = orderService.filterDate(data.productlist);
            var fields = ['order_date', 'id_number_client', 'device_mac', 'status', 'product_name', 'shipping_address', 'city'];
            var csv = json2csv({ data: dataCsvfilter, fields: fields });
            orderService.exportToCsv('commerce.iothings.csv', csv);
        }, function(error){
            console.log(error);
        });
    };
}
"use strict";
angular
        .module('loginModule', [])
        .factory('sha256', function () {

                return {

                        convertToSHA256: function (data) {


                                var rotateRight = function (n, x) {
                                        return ((x >>> n) | (x << (32 - n)));
                                }
                                var choice = function (x, y, z) {
                                        return ((x & y) ^ (~x & z));
                                }
                                function majority(x, y, z) {
                                        return ((x & y) ^ (x & z) ^ (y & z));
                                }
                                function sha256_Sigma0(x) {
                                        return (rotateRight(2, x) ^ rotateRight(13, x) ^ rotateRight(22, x));
                                }
                                function sha256_Sigma1(x) {
                                        return (rotateRight(6, x) ^ rotateRight(11, x) ^ rotateRight(25, x));
                                }
                                function sha256_sigma0(x) {
                                        return (rotateRight(7, x) ^ rotateRight(18, x) ^ (x >>> 3));
                                }
                                function sha256_sigma1(x) {
                                        return (rotateRight(17, x) ^ rotateRight(19, x) ^ (x >>> 10));
                                }
                                function sha256_expand(W, j) {
                                        return (W[j & 0x0f] += sha256_sigma1(W[(j + 14) & 0x0f]) + W[(j + 9) & 0x0f] +
                                                sha256_sigma0(W[(j + 1) & 0x0f]));
                                }

                                /* Hash constant words K: */
                                var K256 = new Array(
                                        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                                        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                                        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                                        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                                        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                                        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                                        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                                        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                                        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                                        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                                        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                                        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                                        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                                        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                                        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                                        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
                                );

                                /* global arrays */
                                var ihash, count, buffer;
                                var sha256_hex_digits = "0123456789abcdef";

                                /* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters: 
                                overflow) */
                                function safe_add(x, y) {
                                        var lsw = (x & 0xffff) + (y & 0xffff);
                                        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                                        return (msw << 16) | (lsw & 0xffff);
                                }

                                /* Initialise the SHA256 computation */
                                function sha256_init() {
                                        ihash = new Array(8);
                                        count = new Array(2);
                                        buffer = new Array(64);
                                        count[0] = count[1] = 0;
                                        ihash[0] = 0x6a09e667;
                                        ihash[1] = 0xbb67ae85;
                                        ihash[2] = 0x3c6ef372;
                                        ihash[3] = 0xa54ff53a;
                                        ihash[4] = 0x510e527f;
                                        ihash[5] = 0x9b05688c;
                                        ihash[6] = 0x1f83d9ab;
                                        ihash[7] = 0x5be0cd19;
                                }

                                /* Transform a 512-bit message block */
                                function sha256_transform() {
                                        var a, b, c, d, e, f, g, h, T1, T2;
                                        var W = new Array(16);

                                        /* Initialize registers with the previous intermediate value */
                                        a = ihash[0];
                                        b = ihash[1];
                                        c = ihash[2];
                                        d = ihash[3];
                                        e = ihash[4];
                                        f = ihash[5];
                                        g = ihash[6];
                                        h = ihash[7];

                                        /* make 32-bit words */
                                        for (var i = 0; i < 16; i++)
                                                W[i] = ((buffer[(i << 2) + 3]) | (buffer[(i << 2) + 2] << 8) | (buffer[(i << 2) + 1]
                                                        << 16) | (buffer[i << 2] << 24));

                                        for (var j = 0; j < 64; j++) {
                                                T1 = h + sha256_Sigma1(e) + choice(e, f, g) + K256[j];
                                                if (j < 16) T1 += W[j];
                                                else T1 += sha256_expand(W, j);
                                                T2 = sha256_Sigma0(a) + majority(a, b, c);
                                                h = g;
                                                g = f;
                                                f = e;
                                                e = safe_add(d, T1);
                                                d = c;
                                                c = b;
                                                b = a;
                                                a = safe_add(T1, T2);
                                        }

                                        /* Compute the current intermediate hash value */
                                        ihash[0] += a;
                                        ihash[1] += b;
                                        ihash[2] += c;
                                        ihash[3] += d;
                                        ihash[4] += e;
                                        ihash[5] += f;
                                        ihash[6] += g;
                                        ihash[7] += h;
                                }

                                /* Read the next chunk of data and update the SHA256 computation */
                                function sha256_update(data, inputLen) {
                                        var i, index, curpos = 0;
                                        /* Compute number of bytes mod 64 */
                                        index = ((count[0] >> 3) & 0x3f);
                                        var remainder = (inputLen & 0x3f);

                                        /* Update number of bits */
                                        if ((count[0] += (inputLen << 3)) < (inputLen << 3)) count[1]++;
                                        count[1] += (inputLen >> 29);

                                        /* Transform as many times as possible */
                                        for (i = 0; i + 63 < inputLen; i += 64) {
                                                for (var j = index; j < 64; j++)
                                                        buffer[j] = data.charCodeAt(curpos++);
                                                sha256_transform();
                                                index = 0;
                                        }

                                        /* Buffer remaining input */
                                        for (var j = 0; j < remainder; j++)
                                                buffer[j] = data.charCodeAt(curpos++);
                                }

                                /* Finish the computation by operations such as padding */
                                function sha256_final() {
                                        var index = ((count[0] >> 3) & 0x3f);
                                        buffer[index++] = 0x80;
                                        if (index <= 56) {
                                                for (var i = index; i < 56; i++)
                                                        buffer[i] = 0;
                                        } else {
                                                for (var i = index; i < 64; i++)
                                                        buffer[i] = 0;
                                                sha256_transform();
                                                for (var i = 0; i < 56; i++)
                                                        buffer[i] = 0;
                                        }
                                        buffer[56] = (count[1] >>> 24) & 0xff;
                                        buffer[57] = (count[1] >>> 16) & 0xff;
                                        buffer[58] = (count[1] >>> 8) & 0xff;
                                        buffer[59] = count[1] & 0xff;
                                        buffer[60] = (count[0] >>> 24) & 0xff;
                                        buffer[61] = (count[0] >>> 16) & 0xff;
                                        buffer[62] = (count[0] >>> 8) & 0xff;
                                        buffer[63] = count[0] & 0xff;
                                        sha256_transform();
                                }

                                /* Split the internal hash values into an array of bytes */
                                function sha256_encode_bytes() {
                                        var j = 0;
                                        var output = new Array(32);
                                        for (var i = 0; i < 8; i++) {
                                                output[j++] = ((ihash[i] >>> 24) & 0xff);
                                                output[j++] = ((ihash[i] >>> 16) & 0xff);
                                                output[j++] = ((ihash[i] >>> 8) & 0xff);
                                                output[j++] = (ihash[i] & 0xff);
                                        }
                                        return output;
                                }

                                /* Get the internal hash as a hex string */
                                function sha256_encode_hex() {
                                        var output = new String();
                                        for (var i = 0; i < 8; i++) {
                                                for (var j = 28; j >= 0; j -= 4)
                                                        output += sha256_hex_digits.charAt((ihash[i] >>> j) & 0x0f);
                                        }
                                        return output;
                                }



                                /* test if the JS-interpreter is working properly */
                                function sha256_self_test() {
                                        return sha256_digest("message digest") ==
                                                "f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650";
                                }

                                sha256_init();
                                sha256_update(data, data.length);
                                sha256_final();
                                return sha256_encode_hex();

                        }

                }

        });
"use strict";

angular
    .module('loginModule')
    .factory('loginService', loginService);

loginService.$inject = ['$q', '$window', '$http', 'urlService'];

function loginService($q, $window, $http, urlService) {

    var vm = this;

    vm.postLogin = function (data) {
        var deferred = $q.defer();
        var req = {
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST',
            url: urlService.postLogin(),
            data: data
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    }

    return {
        postLogin: vm.postLogin
    }
}
'use strict';

angular
    .module('loginModule')
    .controller('loginController', loginController);

//Inject dependencies
loginController.$inject = ['$state', 'loginService', '$window', '$rootScope', '$mdDialog', 'sha256'];

function loginController($state, loginService, $window, $rootScope, $mdDialog, sha256) {

    $window.scrollTo(0, 0);
    var vm = this;
    vm.msgValid = false;
    vm.Form = {};

    /*function showSpiner(){
        $mdDialog.show({
            templateUrl: 'app/features/button/button.modal.html'
        });
    };*/

    vm.login2 = function(){
        $rootScope.showSpiner();
        loginService.postLogin(vm.Form).then(function(data){
            if(data.data.status == 401){
                debugger
            }else if(data.data.errorCode == 0){
                debugger
            }else {
                debugger
            }
        }, function(error){
            console.log(error);
        })
    }

    vm.loginClient = function(){
        $rootScope.showSpiner();
        vm.Form.password = sha256.convertToSHA256(vm.Form.password);
        $.ajax({
            type: 'post',
            datatype : "application/json",
            contentType: "text/plain",
            url: '/Admin/Login',
            data: angular.toJson(vm.Form),
            success: function (data, textStatus, request) {
                $mdDialog.hide();
                if(data.status == 401){
                    swal("Verifica usuario y contraseña");
                }else if(data.errorCode == 0){
                    localStorage.setItem("tokenJWT", request.getResponseHeader('authorization'));
                    localStorage.setItem("imgClient", data.img);
                    $state.go('product');
                    //vm.Form = {};
                }else {
                    swal("Intentalo mas tarde")
                }
            },
            error: function(error) {
                //console.log(error);
                $mdDialog.hide();
                swal("Verifica usuario y contraseña");
            }
        });
    }

    vm.validate = function (valid) {
        if (!valid) {
            vm.msgValid = true;
        }
    }
}
"use strict";
angular
        .module('cancelarModule', [

        ]);
"use strict";

angular
    .module('cancelarModule')
    .factory('cancelarService', cancelarService);

cancelarService.$inject = ['$q', '$window', '$http', 'urlService'];

function cancelarService($q, $window, $http, urlService) {

    var vm = this;

    vm.getCancelarOrden = function (token, id) {
        var deferred = $q.defer();
        var req = {
            headers: {
                    'Authorization': token,
                    'Id': id
            },
            method: 'GET',
            url: urlService.CancelOrderEmail()
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    }

    return {
        getCancelarOrden: vm.getCancelarOrden
    }
}
'use strict';

angular
    .module('cancelarModule')
    .controller('cancelarController', cancelarController);

//Inject dependencies
cancelarController.$inject = ['$state', 'cancelarService', '$window', '$stateParams'];

function cancelarController($state, cancelarService, $window, $stateParams) {

    //angular.element(document.querySelector('#header')).css('display','none');
    //angular.element(document.querySelector('#footer')).css('display','none');
    //angular.element(document.querySelector('.menu-login')).css('display','none');
    //angular.element(document.querySelector('.div-hamburguesa')).css('display','none');
    var token = $stateParams.token;
    var id = $stateParams.id;
    if(!token || !id){
        $state.go('product');
    }
    var vm = this;
    vm.show = true;

    cancelarService.getCancelarOrden(token, id).then(function(data){
        vm.show = false;
        if(data.data){
            if(data.data.error){
                vm.mensaje = "La fecha limite de cancelación ya expiró";
            }else {
                if(data.data.succes == 1){
                    vm.mensaje = data.data.msg;
                    vm.id = data.data.id;
                    vm.producto = data.data.prdouct;
                }else if(data.data.succes == 0){
                    vm.mensaje = data.data.msg;
                }
            }
        }else {
            vm.mensaje = "Intentelo mas tarde";
        }
    }, function(error){
        console.log(error);
    })

}
"use strict";
angular
        .module('buttonModule', [

        ]);
"use strict";

angular
    .module('buttonModule')
    .factory('buttonService', buttonService);

buttonService.$inject = ['$q', '$window', '$http', 'urlService', '$state'];

function buttonService($q, $window, $http, urlService, $state) {

    var vm = this;

    vm.updateStatusBtn = function (mac, status) {
        var deferred = $q.defer();
        var req = {
            method: 'PUT',
            url: urlService.putUpdateButton() + mac + '/' + status,
            headers: {
                    'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
            }
        };
        $http(req).then(function (data) {
            deferred.resolve(data);
        }, function (err) {
            deferred.resolve(err);
        });
        return deferred.promise;
    }

    vm.orderActive = function (arr) {
        var out = [];
        for (var i = 0; i < arr.length; i = i + 2) {
            if(arr[i].active == 'active' && arr[i+1].active == 'active'){
                arr[i].active = 'Activado';
                arr[i].switch = true;
            }else if((arr[i].active == 'active' && arr[i+1].active == null) || (arr[i].active == null && arr[i+1].active == 'active') || (arr[i].active == null && arr[i+1].active == null)){
                arr[i].active = 'Por activar';
                arr[i].switch = null;
            }else if(arr[i].active == 'disabled' || arr[i+1].active == 'disabled'){
                arr[i].active = 'Desactivado';
                arr[i].switch = false;
            }
            out.push(arr[i]);
        }
        return out;
    }

    return {
        orderActive: vm.orderActive,
        updateStatusBtn: vm.updateStatusBtn,
        getBtnList: vm.getBtnList
    }
}
'use strict';

angular
    .module('buttonModule')
    .controller('buttonController', buttonController);
    
//Inject dependencies
buttonController.$inject = ['$state', 'buttonService', '$window', '$scope', 'NgTableParams', 'ButtonData', '$mdDialog', '$rootScope', '$timeout'];

function buttonController($state, buttonService, $window, $scope, NgTableParams, ButtonData, $mdDialog, $rootScope, $timeout) {

    $window.scrollTo(0, 0);
    var vm = this;
    $timeout(function(){
        $rootScope.hideSpiner();
    }, 0);
    vm.displayedCollection = [];
    vm.displayed = buttonService.orderActive(ButtonData);
    vm.displayedCollection = [].concat(vm.displayed);

    function showSpiner(){
        $mdDialog.show({
            templateUrl: 'app/features/button/button.modal.html'
        });
    };

    function updateTable(){
        $state.reload();
    };

    vm.switchChange = function (row) {
        showSpiner();
        var status = null;
        if (row.switch == true) {
            status = 1;
        } else if (row.switch == false) {
            status = 2;
        } else if (row.switch == null) {
            status = 3;
        };
        buttonService.updateStatusBtn(row.device_mac, status).then(function (data) {
            updateTable();
            $mdDialog.hide();
        }, function (error) {
            console.log(error);
            $mdDialog.hide();
        });
    };

}
"use strict";
angular
    .module('headerModule', [])
    .component('headerHome', {
        templateUrl: 'app/components/header/header.view.html',
        controller: 'headerController',
        controllerAs: 'headerCtrl',
    });
'use strict';

angular
    .module('headerModule')
    .controller('headerController', headerController);

//Inject dependencies
headerController.$inject = ['$window', '$state', '$location', '$rootScope'];

function headerController($window, $state, $location, $rootScope) {

    function addClassItem(state){

        angular.element(document.querySelector('#item-menu-inicio')).removeClass('item-menu-borde-left-active');
        angular.element(document.querySelector('#item-menu-commerce')).removeClass('item-menu-borde-left-active');
        angular.element(document.querySelector('#item-menu-sos')).removeClass('item-menu-borde-left-active');
        angular.element(document.querySelector('#item-menu-asistencia')).removeClass('item-menu-borde-left-active');
        angular.element(document.querySelector('#item-menu-energy')).removeClass('item-menu-borde-left-active');
        angular.element(document.querySelector('#item-menu-markethings')).removeClass('item-menu-borde-left-active');

        switch(state) {
            case '/':
                angular.element(document.querySelector('#item-menu-inicio')).addClass('item-menu-borde-left-active');
                break;
            case '/commerce':
                angular.element(document.querySelector('#item-menu-commerce')).addClass('item-menu-borde-left-active');
                break;
            case '/sos':
                angular.element(document.querySelector('#item-menu-sos')).addClass('item-menu-borde-left-active');
                break;
            case '/asistencia':
                angular.element(document.querySelector('#item-menu-asistencia')).addClass('item-menu-borde-left-active');
                break;
            case '/energy':
                angular.element(document.querySelector('#item-menu-energy')).addClass('item-menu-borde-left-active');
                break;
            case '/markethings':
                angular.element(document.querySelector('#item-menu-markethings')).addClass('item-menu-borde-left-active');
                break;
        }
    }

    var vm = this;
    vm.menu = false;
    //if(localStorage.getItem("imgClient")){
    //    vm.imgClient = localStorage.getItem("imgClient").replace(/"/g,'');
    //}
    
    vm.logout = function(){
        localStorage.removeItem("tokenJWT");
        localStorage.removeItem("imgClient");
        $state.go('login');
    }

    var state = $location.url();
    addClassItem(state);
  
    vm.menuClass = function(){
         var state = $location.url();
         addClassItem(state);
    }

}
"use strict";
angular
    .module('footerModule', [])
    .component('footerHome', {
        templateUrl: 'app/components/footer/footer.view.html',
        controller: 'footerController',
        controllerAs: 'footerCtrl',
    });
'use strict';

angular
    .module('footerModule')
    .controller('footerController', footerController);

//Inject dependencies
footerController.$inject = ['$state', '$q', '$http', '$window'];

function footerController($state, $q, $http, $window) {

    var vm = this;
    vm.Form = {};
    vm.btnSubmit = true;
       
}
'use strict';

angular
    .module('persistModule', [])
    .directive('stPersist', function () {
            return {
                require: '^stTable',
                link: function (scope, element, attr, ctrl) {
                    var nameSpace = attr.stPersist;

                    //save the table state every time it changes
                    scope.$watch(function () {
                        return ctrl.tableState();
                    }, function (newValue, oldValue) {
                        if (newValue !== oldValue) {
                            scope.smartTableState = newValue;
                            localStorage.setItem(nameSpace, JSON.stringify(newValue));
                        }
                    }, true);

                    //fetch the table state when the directive is loaded
                    if (localStorage.getItem(nameSpace)) {
                        var savedState = JSON.parse(localStorage.getItem(nameSpace));
                        var tableState = ctrl.tableState();

                        angular.extend(tableState, savedState);
                        scope.smartTableState = savedState;
                        ctrl.pipe();

                    }

                }
            };
        });
    
'use strict';
////-------------------No Usada---------------------///
angular
    .module('filterModule', [])
    .filter("dateFilter", function () {
        return function (items, from, to) {
            var result = [];
            angular.forEach(items, function (value) {
                if(to != undefined && from != undefined){
                    var from1 = from.getTime() - (from.getHours()*3600000 + from.getMinutes()*60000 + from.getSeconds()*1000 + from.getMilliseconds());
                    var to1 = to.getTime() - (to.getHours()*3600000 + to.getMinutes()*60000 + to.getSeconds()*1000 + to.getMilliseconds());
                    if(from1 == to1){
                        if(new Date(value.order_date).toJSON().slice(0,10).replace(/-/g,'/') == new Date(from.getTime()).toJSON().slice(0,10).replace(/-/g,'/')){
                            result.push(value);
                        }
                    }else if((value.order_date >= from1) && (value.order_date <= to1) && (from1 <= to1)){
                        result.push(value);
                    }else {
                        result.push(value);
                    }
                    /*console.log(new Date(value.order_date).toJSON().slice(0,10).replace(/-/g,'/'));
                    console.log(new Date(from.getTime()).toJSON().slice(0,10).replace(/-/g,'/'));
                    console.log(new Date(to.getTime()).toJSON().slice(0,10).replace(/-/g,'/'));*/
                }else {
                    result.push(value);
                }
            });
            return result;
        };
    });
    
'use strict';

angular
    .module('csvModule', [])
    .directive('stExport',function(){
        return {
            restrict:'E',
            require:'^stTable',
            template:'<button ng-click="export()"></button>',
            link:function(scope, element, smartTable, ctrl){
                scope.export = function(){
                    //var filtered = smartTable.getFilteredCollection();
                    console.log(smartTable);
                    console.log(ctrl.getFilteredCollection());
                    //debugger
                }
            }
        }
    });
    
"use strict";
angular
        .module('glanz', [
    
            //module for state routing.
            'nzToggle',
            'naif.base64',
            'smart-table',
            'ngTable',
            'ngAnimate',
            'ngMessages',
            'ngMaterial',
            'ui.router',
            'ngMap',
            
            //module feature
            'passwordModule',
            'orderModule',
            'productModule',
            'buttonModule',
            'loginModule',
            'cancelarModule',
            
            //module components
            'csvModule',
            'filterModule',
            'persistModule',
            'headerModule',
            'footerModule'
        ]);
(function () {
    "use strict";

    angular
        .module('glanz')
        .factory('utilitiesService', utilitiesService);

    utilitiesService.$inject = ['$state', '$q', 'urlService', '$http', '$window'];

    function utilitiesService($state, $q, urlService, $http, $window) {

        var vm = this;

        vm.getProduct = function () {
            var deferred = $q.defer();
            if (localStorage.getItem("tokenJWT") == null) {
                $state.go('login');
                deferred.resolve("Token null");
                return deferred.promise;
            } else {
                var req = {
                    method: 'GET',
                    url: urlService.getProductList(),
                    headers: {
                        'Authorization': localStorage.getItem("tokenJWT").replace(/"/g, '')
                    }
                };
                $http(req).then(function (data) {
                    deferred.resolve(data);
                }, function (err) {
                    deferred.resolve(err);
                });
                return deferred.promise;
            }
        };

        vm.getBtnList = function () {
            var deferred = $q.defer();
            if(localStorage.getItem("tokenJWT") == null){
                $state.go('login');
                deferred.resolve("Token null");
                return deferred.promise;
            }else{
                var req = {
                    method: 'GET',
                    url: urlService.getButton(),
                    headers: {
                            'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
                    }
                };
                $http(req).then(function (data) {
                    deferred.resolve(data);
                }, function (err) {
                    deferred.resolve(err);
                });
                return deferred.promise;
            }
        };

        vm.getLocalStorageItem = function (key) {
            var data = localStorage.getItem(key);
            if (!data) {
                data = undefined;
            } else {
                data = data;
            }
            return data;
        };

        vm.isAuthenticate = function () {
            var token = vm.getLocalStorageItem("tokenJWT");
            if (token) {
                if (token.split('.').length === 3) {
                    try {
                        var base64Url = token.split('.')[1];
                        var base64 = base64Url.replace('-', '+').replace('_', '/');
                        //var exp = JSON.parse(this.$window.atob(base64)).exp;
                        var exp = JSON.parse($window.atob(base64)).exp;
                        if (typeof exp === 'number') {
                            return Math.round(new Date().getTime() / 1000) < exp;
                        }
                    }
                    catch (e) {
                        return true; // Pass: Non-JWT token that looks like JWT
                    }
                }
                return true; // Pass: All other tokens
            }
            return false; // Fail: No token at all
        };

        return {
            isAuthenticate: vm.isAuthenticate,
            getBtnList: vm.getBtnList,
            getProduct: vm.getProduct
        }

    }
})();
(function () {
    "use strict";

    angular
        .module('glanz')
        .factory('urlService', urlService);

    urlService.$inject = [];

    function urlService() {

        var vm = this;
        var endpoint = "http://localhost:8080";
        //var endpoint = "http://commerce.iothings.co:4000";
        //var endpoint = "https://commerce.iothings.co";

        vm.validRememberPassword = function () {
            return endpoint + '/Admin/ValidRememberPassword/';
        };

        vm.remmemberPassword = function () {
            return endpoint + '/Admin/RememberPassword/';
        };

        vm.getButton = function () {
            return endpoint + '/Admin/ButtonList/';
        };

        vm.getProductList = function () {
            return endpoint + '/Admin/ProductList/';
        };

        vm.putUpdateButton = function () {
            return endpoint + '/Admin/BtnActiveUpdate/';
        };

        vm.putUpdatePrduct = function () {
            return endpoint + '/Admin/UpdateProduct/';
        };

        vm.deleteProduct = function () {
            return endpoint + '/Admin/DeleteProduct/';
        };

        vm.postAddProduct = function () {
            return endpoint + '/Admin/AddProduct/';
        };

        vm.postLogin = function () {
            return endpoint + '/Admin/Login/';
        };

        vm.getOrderList = function () {
            return endpoint + '/Admin/GetOrders/';
        };

        vm.CancelOrderEmail = function () {
            return endpoint + '/Admin/CancelOrderEmail/';
        };

        return {
            getButton: vm.getButton,
            putUpdateButton: vm.putUpdateButton,
            getProductList: vm.getProductList,
            postAddProduct: vm.postAddProduct,
            deleteProduct: vm.deleteProduct,
            putUpdatePrduct: vm.putUpdatePrduct,
            postLogin: vm.postLogin,
            getOrderList: vm.getOrderList,
            CancelOrderEmail: vm.CancelOrderEmail,
            remmemberPassword: vm.remmemberPassword,
            validRememberPassword: vm.validRememberPassword
        }

    }
})();
"use strict";

angular
    .module('glanz')
    .config(routes);

routes.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider', '$mdThemingProvider'];

function routes($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider, $mdThemingProvider) {

    /*$httpProvider.defaults.headers.common = {};
    $httpProvider.defaults.headers.post = {};
    $httpProvider.defaults.headers.put = {};
    $httpProvider.defaults.headers.patch = {};*/

    
    /*$httpProvider.defaults.useXDomain = true;
    $httpProvider.defaults.withCredentials = true;
    delete $httpProvider.defaults.headers.common["X-Requested-With"];
    $httpProvider.defaults.headers.common["Accept"] = "application/json";
    $httpProvider.defaults.headers.common["Content-Type"] = "application/json";*/
    $locationProvider.hashPrefix('');
   
    $stateProvider
        .state('password', {
            url: '/password?token',
            templateUrl: 'app/features/password/password.view.html',
            controller: 'passwordController as password'
        })
        .state('cancelar', {
            url: '/cancelar?token&id',
            templateUrl: 'app/features/cancelar/cancelar.view.html',
            controller: 'cancelarController as cancelar'
        })
        .state('button', {
            url: '/button',
            templateUrl: 'app/features/button/button.view.html',
            controller: 'buttonController as button',
            resolve: {
                ButtonData: function($q, $http, urlService, $rootScope){
                    $rootScope.showSpiner();
                    var deferred = $q.defer();
                    if(localStorage.getItem("tokenJWT") == null){
                        $state.go('login');
                        deferred.resolve("Token null");
                        return deferred.promise;
                    }else{
                        var req = {
                            method: 'GET',
                            url: urlService.getButton(),
                            headers: {
                                'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
                            }
                        };
                        $http(req).then(function (data) {
                            deferred.resolve(data.data);
                        }, function (err) {
                            deferred.resolve(err);
                        });
                        //$rootScope.hideSpiner();
                        return deferred.promise;
                    }
                }
            }
        })
        .state('product', {
            url: '/product',
            templateUrl: 'app/features/product/product.view.html',
            controller: 'productController as product',
            resolve: {
                productData: function($q, $http, urlService, $rootScope){
                    $rootScope.showSpiner();
                    var deferred = $q.defer();
                    if(localStorage.getItem("tokenJWT") == null){
                        $state.go('login');
                        deferred.resolve("Token null");
                        return deferred.promise;
                    }else{
                        var req = {
                            method: 'GET',
                            url: urlService.getProductList(),
                            headers: {
                                'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
                            }
                        };
                        $http(req).then(function (data) {
                            deferred.resolve(data.data);
                        }, function (err) {
                            deferred.resolve(err);
                        });
                        //$rootScope.hideSpiner();
                        return deferred.promise;
                    }
                }
            }
        })
        .state('order', {
            url: '/order',
            templateUrl: 'app/features/order/order.view.html',
            controller: 'orderController as order',
            resolve: {
                orderData: function($q, $http, urlService, $rootScope){
                    $rootScope.showSpiner();
                    var deferred = $q.defer();
                    if(localStorage.getItem("tokenJWT") == null){
                        $state.go('login');
                        deferred.resolve("Token null");
                        return deferred.promise;
                    }else{
                        var req = {
                            method: 'GET',
                            url: urlService.getOrderList(),
                            headers: {
                                'Authorization': localStorage.getItem("tokenJWT").replace(/"/g,'')
                            }
                        };
                        $http(req).then(function (data) {
                            deferred.resolve(data.data);
                        }, function (err) {
                            deferred.resolve(err);
                        });
                        //$rootScope.hideSpiner();
                        return deferred.promise;
                    }
                }
            }
        })
        .state('login', {
            url: '/login',
            templateUrl: 'app/features/login/login.view.html',
            controller: 'loginController as login'
        });


    $urlRouterProvider.otherwise('/login')
}
"use strict";

angular
    .module('glanz')
    .run(run);

run.$inject = ['$rootScope','$location', 'utilitiesService', '$state', '$mdDialog'];

function run($rootScope, $location, utilitiesService, $state, $mdDialog) {

    $rootScope.menu = true;

    $rootScope.showSpiner = function(){
        $mdDialog.show({
            templateUrl: 'app/features/button/button.modal.html'
        });
    }

    $rootScope.hideSpiner = function(){
        if($mdDialog){
            $mdDialog.hide();
        } 
    }

    $rootScope.$on('$locationChangeSuccess', function (event, next, current) {
        var state = $location.url();
        var loggedIn = utilitiesService.isAuthenticate();
        if (!loggedIn) {
            $rootScope.menu = false;
            if(state.split("?")[0] != '/cancelar' && state.split("?")[0] != '/password'){
                $rootScope.hideSpiner();
                $state.go('login');
                $rootScope.loginScope = false;
                //$rootScope.menu = true;
            }else {
                //$rootScope.menu = false;
            }
        }else{
            $rootScope.imgClient = localStorage.getItem("imgClient").replace(/"/g,'');
            //angular.element(document.querySelector('.menu-login')).css('display','flex');
            //angular.element(document.querySelector('.div-hamburguesa')).css('display','block');
            if(state.split("?")[0] != '/cancelar' && state.split("?")[0] != '/password'){
                $rootScope.menu = true;
            }else {
                $rootScope.menu = false;
            }
            if(state == '/login'){
                $state.go('product');
            }
            $rootScope.loginScope = true;
        }
    });
    
}